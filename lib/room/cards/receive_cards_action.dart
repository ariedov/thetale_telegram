import 'dart:async';

import 'package:epictale_telegram/room/action.dart';
import 'package:epictale_telegram/telegram/telegram_wrapper.dart';
import 'package:teledart/model.dart';
import 'package:thetale_api/thetale_api.dart';

class ReceiveCardsAction extends MultiUserAction {
  ReceiveCardsAction(
      MessageInfo info, TaleApiWrapper taleApi, TelegramWrapper telegram)
      : super(info, taleApi, telegram);

  static const String name = "/cardsreceive";

  @override
  Future<void> performAction({String account}) async {
    final result = await taleApi.receiveNewCards();

    // TODO: udpate new cards message if available

    if (result?.cards?.isNotEmpty ?? false) {
      await trySendMessage(buildCardList(result.cards));
    } else {
      await trySendMessage("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–∑—è—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã.");
    }
  }

  @override
  Future<void> performChooserAction(Map<String, String> sessionNameMap) async {
    if (sessionNameMap.isNotEmpty) {
      await trySendMessage(
          "–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç—ã —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã.",
          replyMarkup: InlineKeyboardMarkup(
              inline_keyboard: buildAccountListAction(sessionNameMap, name)));
    } else {
      await trySendMessage(
          "–í–∏–¥–∏–º–æ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ /auth");
    }
  }

  @override
  Future<void> performEmptyAction() async {
    await trySendMessage(
        "–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π /auth –∏–ª–∏ /start.");
  }

  String buildCardList(List<Card> cards) {
    final buffer = StringBuffer();
    buffer.write("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç ${cards.length}:");
    return cards.fold(buffer, (buffer, card) {
      buffer.writeln();
      buffer.write("üÉè ${card.name}");
      return buffer;
    }).toString();
  }
}
