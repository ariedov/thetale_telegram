import 'dart:async';

import 'package:epictale_telegram/persistence/user_manager.dart';
import 'package:epictale_telegram/tale_api/models.dart';
import 'package:epictale_telegram/tale_api/tale_api.dart';
import 'package:epictale_telegram/telegram_api/models.dart';
import 'package:epictale_telegram/telegram_api/telegram_api.dart';

abstract class Action {
  Action(this._userManager, this._taleApi, this._telegramApi);

  final UserManager _userManager;
  final TaleApi _taleApi;
  final TelegramApi _telegramApi;

  Future<void> apply({String account}) async {
    try {
      await _performAction(account: account);
    } catch (e) {
      if (e is String) {
        await trySendMessage(e);
      }
      print(e);
      await trySendMessage(
          "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /auth");
    }
  }

  Future<void> _performAction({String account});

  TaleApi get taleApi => _taleApi;
  TelegramApi get telegramApi => _telegramApi;

  Future<Message> trySendMessage(String message,
      {ReplyKeyboard keyboard, InlineKeyboard inlineKeyboard}) async {
    try {
      return await telegramApi.sendMessage(message,
          keyboard: keyboard, inlineKeyboard: inlineKeyboard);
    } catch (e) {
      print("Failed to send message");
    }
    return null;
  }
}

class StartAction extends Action {
  StartAction(UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    await trySendMessage("–ü—Ä–∏–≤–µ—Ç, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å!");

    await _userManager.clearAll();
    final info = await taleApi.apiInfo();
    await _userManager.addUserSession(info.sessionInfo);

    await trySendMessage("""
        –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã ${info.data.gameVersion}. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é —Ç–µ–±—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å.
        /start - –Ω–∞—á–∞—Ç—å –≤—Å–µ –ø–æ –Ω–æ–≤–æ–π
        /auth - —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        /confirm - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–∞–ª –¥–æ—Å—Ç—É–ø –±–æ—Ç—É (–º–Ω–µ)

        /add - –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        /remove - —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

        /help - –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –≥–µ—Ä–æ—é
        /info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ
        """);

    final link = await taleApi.auth(headers: await createHeaders(_userManager));
    await trySendMessage(
      "–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è - –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ${apiUrl}${link.authorizationPage}",
      inlineKeyboard: InlineKeyboard([
        [
          InlineKeyboardButton(
              "/confirm", "/confirm ${info.sessionInfo.sessionId}")
        ]
      ]),
    );
  }
}

class ConfirmAuthAction extends Action {
  ConfirmAuthAction(
      UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    final sessions = await _userManager.readUserSession();
    final session = sessions.firstWhere((info) => info.sessionId == account);

    final status = await taleApi.authStatus(
        headers: await createHeadersFromSession(session));

    if (status.data.isAccepted) {
      await _userManager.saveUserSession(status.sessionInfo);
    }

    if (status.data.isAccepted) {
      await trySendMessage("–ù—É –ø—Ä–∏–≤–µ—Ç, ${status.data.accountName}.",
          keyboard: ReplyKeyboard([
            ["/help"],
            ["/info"],
          ]));

      final gameInfo =
          await _taleApi.gameInfo(headers: await createHeaders(_userManager));
      await trySendMessage(
          """${gameInfo.account.hero.base.name} —É–∂–µ –∑–∞–∂–¥–∞–ª—Å—è.\n${generateAccountInfo(gameInfo.account)}
      """);
    } else {
      await trySendMessage("–¢–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑.");
    }
  }
}

class RequestAuthAction extends Action {
  RequestAuthAction(
      UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    await _userManager.clearAll();
    final info = await taleApi.apiInfo();

    await _userManager.addUserSession(info.sessionInfo);

    final link = await taleApi.auth(headers: await createHeaders(_userManager));
    await trySendMessage(
      "–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è - –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ${apiUrl}${link.authorizationPage}",
      inlineKeyboard: InlineKeyboard([
        [
          InlineKeyboardButton(
              "/confirm", "/confirm ${info.sessionInfo.sessionId}")
        ]
      ]),
    );
  }
}

class InfoAction extends Action {
  InfoAction(UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    final sessions = await _userManager.readUserSession();

    if (sessions.isEmpty) {
      await trySendMessage(
          "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π /auth –∏–ª–∏ /start.");
      return;
    }

    final accountSession = sessions.firstWhere(
        (session) => session.sessionId == account,
        orElse: () => null);
    if (accountSession == null && sessions.length > 1) {
      await trySendMessage("–í—ã–±–µ—Ä–∏ –æ –∫–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.",
          inlineKeyboard: InlineKeyboard(
              await buildAccountListAction(sessions, taleApi, "/info")));
      return;
    }

    Map<String, String> headers;
    if (accountSession != null) {
      headers = await createHeadersFromSession(accountSession);
    } else {
      headers = await createHeaders(_userManager);
    }

    final info = await taleApi.gameInfo(headers: headers);
    await trySendMessage(
        "${info.account.hero.base.name} ${info.account.hero.action?.description ?? ""}.\n${generateAccountInfo(info.account)}");
  }
}

class HelpAction extends Action {
  HelpAction(UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    final sessions = await _userManager.readUserSession();

    if (sessions.isEmpty) {
      await trySendMessage(
          "–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π /auth –∏–ª–∏ /start.");
      return;
    }

    final accountSession = sessions.firstWhere(
        (session) => session.sessionId == account,
        orElse: () => null);
    if (accountSession == null && sessions.length > 1) {
      await trySendMessage("–í—ã–±–µ—Ä–∏ –∫–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å.",
          inlineKeyboard: InlineKeyboard(
              await buildAccountListAction(sessions, taleApi, "/help")));
      return;
    }

    Map<String, String> headers;
    if (accountSession != null) {
      headers = await createHeadersFromSession(accountSession);
    } else {
      headers = await createHeaders(_userManager);
    }

    final operation = await _taleApi.help(headers: headers);
    await trySendMessage("–ü—ã—Ç–∞—é—Å—å –ø–æ–º–æ—á—å!");

    Timer.periodic(Duration(seconds: 1), (timer) async {
      final status =
          await taleApi.checkOperation(operation.statusUrl, headers: headers);
      if (!status.isProcessing) {
        timer.cancel();

        final gameInfo = await taleApi.gameInfo(headers: headers);
        await trySendMessage(
            "${gameInfo.account.hero.base.name} —Ä–∞–¥ –ø–æ–º–æ—â–∏ –∏ ${gameInfo.account.hero.action?.description ?? ""}.\n${generateAccountInfo(gameInfo.account)}");
      }
    });
  }
}

class AddAccountAction extends Action {
  AddAccountAction(
      UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    final info = await taleApi.apiInfo();
    await _userManager.addUserSession(info.sessionInfo);

    final link = await taleApi.auth(
        headers: await createHeadersFromSession(info.sessionInfo));
    await trySendMessage(
      "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ${apiUrl}${link.authorizationPage}",
      inlineKeyboard: InlineKeyboard([
        [
          InlineKeyboardButton(
              "/confirm", "/confirm ${info.sessionInfo.sessionId}")
        ]
      ]),
    );
  }
}

class RemoveAccountAction extends Action {
  RemoveAccountAction(
      UserManager userManager, TaleApi taleApi, TelegramApi telegramApi)
      : super(userManager, taleApi, telegramApi);

  @override
  Future<void> _performAction({String account}) async {
    final sessions = await _userManager.readUserSession();

    if (account == null) {
      await trySendMessage(
        "–í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.",
        inlineKeyboard: InlineKeyboard(await buildAccountListAction(
            sessions, taleApi, "/remove",
            allowUnauthorized: true)),
      );
    } else {
      final session = sessions.firstWhere((item) => item.sessionId == account,
          orElse: () => null);
      await _userManager.clearSession(session);

      await trySendMessage(
        "–°–µ—Å—Å–∏—è ${account} —É–¥–∞–ª–µ–Ω–∞.",
      );
    }
  }
}

String generateAccountInfo(Account info) {
  final buffer = StringBuffer();
  buffer.writeln("‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: *${info.energy}*");
  buffer.writeln(
      "‚ù§Ô∏è –ñ–∏–∑–Ω—å: *${info.hero.base.health} / ${info.hero.base.maxHealth}*");
  buffer.writeln(
      "‚≠êÔ∏è –û–ø—ã—Ç: *${info.hero.base.experience} / ${info.hero.base.experienceToLevel}*");
  buffer.writeln("üí∞ –î–µ–Ω–µ–≥: *${info.hero.base.money}*");
  return buffer.toString();
}

Future<Map<String, String>> createHeaders(UserManager userManager) async {
  final sessions = await userManager.readUserSession();
  final session = sessions[0];
  return createHeadersFromSession(session);
}

Future<List<List<InlineKeyboardButton>>> buildAccountListAction(
    List<SessionInfo> sessions, TaleApi taleApi, String action,
    {bool allowUnauthorized = false}) async {
  final List<List<InlineKeyboardButton>> buttons = [];
  for (final session in sessions) {
    final info = await taleApi.gameInfo(
        headers: await createHeadersFromSession(session));
    if (info.account != null || allowUnauthorized) {
      buttons.add([
        InlineKeyboardButton(
            info.account?.hero?.base?.name ?? session.sessionId,
            "$action ${session.sessionId}")
      ]);
    }
  }
  return buttons;
}

Future<Map<String, String>> createHeadersFromSession(
    SessionInfo session) async {
  return {
    "Referer": apiUrl,
    "X-CSRFToken": session.csrfToken,
    "Cookie": "csrftoken=${session.csrfToken}; sessionid=${session.sessionId}",
  };
}
