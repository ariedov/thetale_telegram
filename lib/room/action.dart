import 'dart:async';

import 'package:epictale_telegram/tale_api/models.dart';
import 'package:epictale_telegram/tale_api/tale_api.dart';
import 'package:epictale_telegram/telegram_api/models.dart';
import 'package:epictale_telegram/telegram_api/telegram_api.dart';

abstract class Action {
  final TaleApi _taleApi;
  final TelegramApi _telegramApi;

  Action(this._taleApi, this._telegramApi);

  Future<void> performAction();

  TaleApi get taleApi => _taleApi;
  TelegramApi get telegramApi => _telegramApi;

  Future<Message> trySendMessage(String message,
      {ReplyKeyboard keyboard, InlineKeyboard inlineKeyboard}) async {
    try {
      return await telegramApi.sendMessage(message,
          keyboard: keyboard, inlineKeyboard: inlineKeyboard);
    } catch (e) {
      print("Failed to send message");
    }
    return null;
  }
}

class StartAction extends Action {
  StartAction(TaleApi taleApi, TelegramApi telegramApi)
      : super(taleApi, telegramApi);

  @override
  Future<void> performAction() async {
    await trySendMessage("–ü—Ä–∏–≤–µ—Ç, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å!");

    final info = await taleApi.apiInfo();

    await trySendMessage("""
        –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã ${info.gameVersion}. –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é —Ç–µ–±—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å.
        /start - –Ω–∞—á–∞—Ç—å –≤—Å–µ –ø–æ –Ω–æ–≤–æ–π
        /auth - —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        /confirm - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–∞–ª –¥–æ—Å—Ç—É–ø –±–æ—Ç—É (–º–Ω–µ)

        /help - –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –≥–µ—Ä–æ—é
        /info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ
        """);

    final link = await taleApi.auth();
    await trySendMessage(
      "–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è - –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ${_taleApi.apiUrl}${link.authorizationPage}",
      inlineKeyboard: InlineKeyboard([
        [InlineKeyboardButton("/confirm", "/confirm")]
      ]),
    );
  }
}

class ConfirmAuthAction extends Action {
  ConfirmAuthAction(TaleApi taleApi, TelegramApi telegramApi)
      : super(taleApi, telegramApi);

  @override
  Future<void> performAction() async {
    final status = await taleApi.authStatus();

    if (status.isAccepted) {
      await trySendMessage("–ù—É –ø—Ä–∏–≤–µ—Ç, ${status.accountName}.",
          keyboard: ReplyKeyboard([
            ["/help"],
            ["/info"],
          ]));

      final gameInfo = await _taleApi.gameInfo();
      await trySendMessage("""${gameInfo.account.hero.base.name} —É–∂–µ –∑–∞–∂–¥–∞–ª—Å—è.\n${generateAccountInfo(gameInfo.account)}
      """);
    } else {
      await trySendMessage("–¢–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑.");
    }
  }
}

class RequestAuthAction extends Action {
  RequestAuthAction(TaleApi taleApi, TelegramApi telegramApi)
      : super(taleApi, telegramApi);

  @override
  Future<void> performAction() async {
    await taleApi.apiInfo();
    final link = await taleApi.auth();
    await trySendMessage(
      "–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è - –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ ${_taleApi.apiUrl}${link.authorizationPage}",
      inlineKeyboard: InlineKeyboard([
        [InlineKeyboardButton("/confirm", "/confirm")]
      ]),
    );
  }
}

class InfoAction extends Action {
  InfoAction(TaleApi taleApi, TelegramApi telegramApi)
      : super(taleApi, telegramApi);

  @override
  Future<void> performAction() async {
    final info = await taleApi.gameInfo();
    await trySendMessage("${info.account.hero.base.name}\n${generateAccountInfo(info.account)}");
  }
}

class HelpAction extends Action {
  HelpAction(TaleApi taleApi, TelegramApi telegramApi)
      : super(taleApi, telegramApi);

  @override
  Future<void> performAction() async {
    final operation = await _taleApi.help();
    await trySendMessage("–ü—ã—Ç–∞—é—Å—å –ø–æ–º–æ—á—å!");

    Timer.periodic(Duration(seconds: 1), (timer) async {
      final status = await taleApi.checkOperation(operation.statusUrl);
      if (!status.isProcessing) {
        timer.cancel();

        final gameInfo = await taleApi.gameInfo();
        await trySendMessage("${gameInfo.account.hero.base.name} —Ä–∞–¥ –ø–æ–º–æ—â–∏!\n${generateAccountInfo(gameInfo.account)}");
      }
    });
  }
}

class ActionRouter {
  final TaleApi _taleApi;
  final TelegramApi _telegramApi;

  ActionRouter(this._taleApi, this._telegramApi);

  Action route(String action) {
    switch (action) {
      case "/start":
        return StartAction(_taleApi, _telegramApi);
      case "/confirm":
        return ConfirmAuthAction(_taleApi, _telegramApi);
      case "/auth":
        return RequestAuthAction(_taleApi, _telegramApi);
      case "/info":
        return InfoAction(_taleApi, _telegramApi);
      case "/help":
        return HelpAction(_taleApi, _telegramApi);
      default:
        throw "Action $action not supported";
    }
  }
}

String generateAccountInfo(Account info) {
  final buffer = StringBuffer();
  buffer.writeln("‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: *${info.energy}*");
  buffer.writeln("‚ù§Ô∏è –ñ–∏–∑–Ω—å: *${info.hero.base.health} / ${info.hero.base.maxHealth}*");
  buffer.writeln("‚≠êÔ∏è –û–ø—ã—Ç: *${info.hero.base.experience} / ${info.hero.base.experienceToLevel}*");
  buffer.writeln("üí∞ –î–µ–Ω–µ–≥: *${info.hero.base.money}*");
  return buffer.toString();
}
